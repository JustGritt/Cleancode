---
import Layout from '@layouts/Layout.astro';
import ValidIcon from '@icons/valid.astro';
import InvalidIcon from '@icons/invalid.astro';
---

<Layout title="Quizz ðŸ“š">
    <section class="container flex justify-center items-center mt-20 h-dvh w-swh">
        <div class="relative h-full w-full quizz grid place-items-center overflow-hidden">
            <input type="date" name="date" id="date" class="absolute top-20">

            <div id="quizz-content">

            </div>

            <!-- {cards.cards.map((card) => (
                <div class="question-card quizz--card absolute overflow-hidden bg-white pb-16 inline-flex justify-center items-center flex-col w-full max-w-[500px] h-[400px] shadow border rounded">
                    <div class="question flex justify-center items-center flex-col pointer-events-none">
                        <h3 class="px-8 pt-16 text-center text-xl font-bold tracking-tight text-gray-900 sm:text-4xl mb-8 inline pointer-events-none">{card.question}</h3>
                        <input type="text" class="question-input mt-4 w-1/2 p-2 border-2 border-gray-300 rounded-lg pointer-events-auto" />
                        <button class="question-button mt-4 bg-blue-500 text-white px-4 py-2 rounded-lg pointer-events-auto">Check Answer</button>
                    </div>
                    <div class="answer hidden px-8 pt-16 text-center text-xl font-bold tracking-tight text-gray-900 sm:text-4xl mb-8 pointer-events-none">{card.answer}</div>
                </div>
            ))} -->

            <div class="quizz--buttons absolute bottom-40">
                <button id="invalid" class="grid place-items-center p-4 bg-white rounded-full">
                    <InvalidIcon />
                </button>
                <button id="valid" class="grid place-items-center p-4 bg-white rounded-full">
                    <ValidIcon />
                </button>
            </div>
        </div>
    </section>
</Layout>

<style lang="scss">
    html, body {
        overflow: hidden;
    }

    .container {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .quizz {
        opacity: 0;
        transition: opacity 0.1s ease-in-out;
        overflow: hidden;
        &.loaded {
            opacity: 1;
        }

        &--card {
            overflow: hidden;
            will-change: transform;
            transition: all 0.2s ease-in-out;
            cursor: -webkit-grab;
            cursor: -moz-grab;
            cursor: grab;
            &.moving {
                transition: none;
                cursor: -webkit-grabbing;
                cursor: -moz-grabbing;
                cursor: grabbing;
            }
        }

        &--buttons {
            flex: 0 0 100px;
            text-align: center;
            padding-top: 20px;

            button {
                border-radius: 50%;
                line-height: 60px;
                width: 60px;
                border: 0;
                background: #FFFFFF;
                display: inline-block;
                margin: 0 8px;
                &:focus {
                    outline: 0;
                }
            }
        }
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.js" integrity="sha512-qRj8N7fxOHxPkKjnQ9EJgLJ8Ng1OK7seBn1uk8wkqaXpa7OA13LO6txQ7+ajZonyc9Ts4K/ugXljevkFTUGBcw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script lang="ts" type="module">

    const token = localStorage.getItem('token')
    if(!token) {
        window.location.href = '/login';
    }

    const quizzContent = document.getElementById('quizz-content');
    const getDate = document.querySelector('#date');
    let cards = [];

    getDate.addEventListener('change', async(e) => {
        const getCards = await fetch(`http://localhost:3000/cards/quizz?date=${e.target.value}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
        });

        cards = await getCards.json();

        cards.forEach(card => {
            const questionCard = document.createElement('div');
            questionCard.setAttribute('id', card.id);
            questionCard.classList.add('question-card', 'quizz--card', 'absolute', 'overflow-hidden', 'bg-white', 'pb-16', 'inline-flex', 'justify-center', 'items-center', 'flex-col', 'w-full', 'max-w-[500px]', 'h-[400px]', 'shadow', 'border', 'rounded');
            questionCard.innerHTML = `
                <div class="question flex justify-center items-center flex-col pointer-events-none">
                    <h3 class="px-8 pt-16 text-center text-xl font-bold tracking-tight text-gray-900 sm:text-4xl mb-8 inline pointer-events-none">${card.question}</h3>
                    <input type="text" class="question-input mt-4 w-1/2 p-2 border-2 border-gray-300 rounded-lg pointer-events-auto" />
                    <button class="question-button mt-4 bg-blue-500 text-white px-4 py-2 rounded-lg pointer-events-auto">Check Answer</button>
                </div>
                <div class="answer hidden px-8 pt-16 text-center text-xl font-bold tracking-tight text-gray-900 sm:text-4xl mb-8 pointer-events-none">${card.answer}</div>
            `;

            quizzContent.appendChild(questionCard);
            initCards();

        })

        var deck = document.querySelectorAll('.quizz--card');
        deck.forEach((el) => {
            const id = el.getAttribute('id');
            const hammertime = new Hammer(el);
            const textInput = document.querySelector('.question-input');

            hammertime.on('pan', () => {
                if (!textInput.value) return;
                el.classList.add('moving');
            });

            hammertime.on('pan', (event) => {
                if (!textInput.value) return;
                if (event.deltaX === 0) return;
                if (event.center.x === 0 && event.center.y === 0) return;

                quizzContainer.classList.toggle('quizz_valid', event.deltaX > 0);
                quizzContainer.classList.toggle('quizz_invalid', event.deltaX < 0);

                const xMulti = event.deltaX * 0.03;
                const yMulti = event.deltaY / 80;
                const rotate = xMulti * yMulti;

                event.target.style.transform = `translate(${event.deltaX}px, ${event.deltaY}px) rotate(${rotate}deg)`;
            });

            hammertime.on('panend', (event) => {
                if (!textInput.value) return;
                el.classList.remove('moving');
                quizzContainer.classList.remove('quizz_valid');
                quizzContainer.classList.remove('quizz_invalid');

                const moveOutWidth = document.body.clientWidth;
                const keep = Math.abs(event.deltaX) < 80 || Math.abs(event.velocityX) < 0.5;
                event.target.classList.toggle('removed', !keep);

                if (!keep) {
                    const endX = Math.max(Math.abs(event.velocityX) * moveOutWidth, moveOutWidth);
                    const toX = event.deltaX > 0 ? endX : -endX;
                    const endY = Math.abs(event.velocityY) * moveOutWidth;
                    const toY = event.deltaY > 0 ? endY : -endY;
                    const xMulti = event.deltaX * 0.03;
                    const yMulti = event.deltaY / 80;
                    const rotate = xMulti * yMulti;

                    event.target.style.transform = `translate(${toX}px, ${(toY + event.deltaY)}px) rotate(${rotate}deg)`;
                    initCards();
                } else {
                    event.target.style.transform = '';
                }
            });

            const checkButton = el.querySelector('button');
            checkButton.addEventListener('click', async() => {
                const answer = el.querySelector('.answer').textContent;
                const input = el.querySelector('.question-input').value;

                el.querySelector('.question').classList.add('hidden');
                el.querySelector('.answer').classList.remove('hidden');

                if (input.toLowerCase() === answer.toLowerCase()) {
                    el.style.backgroundColor = '#78e08f';
                    await fetch(`http://localhost:3000/cards/${id}/answer`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('token')}`
                        },
                        body: JSON.stringify({
                            isValid: true
                        })
                    });

                } else {
                    el.style.backgroundColor = '#fab1a0';
                    await fetch(`http://localhost:3000/cards/${id}/answer`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('token')}`
                        },
                        body: JSON.stringify({
                            isValid: false
                        })
                    });
                }

            });
        });
    })

    var quizzContainer = document.querySelector('.quizz');
    var deck = document.querySelectorAll('.quizz--card');

    var invalid = document.getElementById('invalid');
    var valid = document.getElementById('valid');

    const initCards = () => {
        const newCards = Array.from(document.querySelectorAll('.quizz--card:not(.removed)'));
        newCards.forEach((card, index) => {
            card.style.zIndex = `${deck.length - index}`;
            card.style.transform = `scale(${(20 - index) / 20}) translateY(-${30 * index}px)`;
            card.style.opacity = `${(10 - index) / 10}`;
        });

        quizzContainer.classList.add('loaded');
    }

    function createButtonListener(valid) {
        return function (event) {
            const card = document.querySelector('.quizz--card:not(.removed)');
            if (!card) return;

            const moveOutWidth = document.body.clientWidth * 1.5;
            const direction = valid ? '' : '-';
            const rotation = valid ? '-30deg' : '30deg';

            card.classList.add('removed');
            card.style.transform = `translate(${direction}${moveOutWidth}px, -100px) rotate(${rotation})`;

            initCards();

            const remainingCards = document.querySelectorAll('.quizz--card:not(.removed)');
            if (remainingCards.length === 0) {
                window.location.href = '/';
                alert('Quizz is over for today! ðŸŽ‰');
            }

            event.preventDefault();
        };
    }

    const invalidListener = createButtonListener(false);
    const validListener = createButtonListener(true);

    initCards();


    invalid.addEventListener('click', invalidListener);
    valid.addEventListener('click', validListener);
</script>
